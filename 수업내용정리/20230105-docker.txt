= watch 명령어

watch 명령어 뒤에 나오는 명령어를 주기적(default 2초)으로 실행해서 실시간 감시용으로 사용할 수 있는 유용한 명령어

# watch -n [초] [실시간 감시를 할 명령어 옵션 인수]

# watch -n 1 docker ps -a

= 이미지와 컨테이너
1. 이미지: 서비스 운영에 필요한 서버 프로그램, 소스코드, 라이브러리, 컴파일된 실행 파일을 묶은 형태로 read-only

(1). read-only : 상태값을 가지고 있지 않고 불변 (immutable)
(2). 최초 생성한 상태를 그대로 유지하고 서버 프로그램, 소스코드, 라이브러리, 컴파일된 실행 파일을 묶은 형태로 만들기 때문에 수MB ~ 수GB가 될 수도 있음
(3). 이미지(read-only)는 계층적 구조를 가지면서 계속 붙여 넣을 수가 있음(module 형태로 제작 + read/write)
(4). 이미지는 docker hub와 같은 repository를 통해 버전관리 및 배포가 가능
    git hub와 유사한 개념으로 버전관리 배포가 가능

* 이미지와 레이어(Layer)
레이어란 기존 이미지에 추가적인 파일이 필요할 때 다시 다운로드 받는 방법이 아닌 해당 파일을 추가하기 위한 개념

명령을 실행하거나 특정 파일을 다운로드 받으면 Layer가 계속 생성이 됨

여러 개의 Layer를 묶어서 하나의 파일시스템으로 사용할 수 있도록 만든게 container라고 보면 됨


2. container = process
이미지를 실행한 상태로 응용프로그램의 종속성과 함께 응용프로그램 자체를 패킹지(또는 캡슐화 -> 즉, 컨테이너처럼 격리) 격리된 공간에서 프로세스 동작시키는 것

(1). 컨테이너는 이미지 Layer(read-only) + 읽기/쓰기 Layer를 추가해서 생성/실행
(2). process는 중단을 하면 메모리에서 삭제가 되고 남아 있지 않지만 container는 계속 남아 있음 따라서, rm 명령으로 지워줘야 함
(3). 컨테이너는 읽기/쓰기 Layer가 그대로 존재해야지만 다음에 재실행을 하더라도 이어서 사용을 할 수 있게 하기 위해 그대로 존재를 하게 됨
RAM에서는 process 처럼 삭제가 됨
(4). 컨테이너는 process가 격리되어 있기 때문에 몇개를 생성해도 무방
(5). 컨테이너는 커널공간과 호스트 자원을 공유

https://docs.docker.com/engine/reference/commandline/docker/
위 docker 공식 사이트에 모든 명령어 사용법이 있음


= docker image 관리 명령어
1. 이미지 가져오기
# docker pull [이미지이름]:[tag]

tag은 버전관리용으로 주로 사용을 함
tag을 적지 않으면 default latest로 적용

2. 이미지 확인
# docker images

3. 이미지 삭제
# docker rmi [이미지이름]:[tag]

container가 이미지를 사용하고 있으면 삭제가 되지 않음
-f --force : 무시하고 삭제 컨테이너도 같이 삭제


= docker로 container 실행 (순서를 맞춰져야 됨)
# docker run [옵션] [이미지이름]:[tag] [ARG]

옵션
-d : detached mode 백그라운드에서 작업
-p : host의 port와 컨테이너 port를 연결 (port forwarding)
     -p host에서사용할port:컨테이너에서 사용하는 port

-it : 터미널을 사용하려면 상호입출력이 되어야 하기 때문에 같이 사용
  -i : interactvie 상호입출력
  -t : tty(터미널) 사용
 * -it 옵션은 주로 /bin/bash ARG를 주로 사용함

--rm : 실행 중단이 되면 바로 삭제
--name : 컨테이너의 이름 지정 (name을 사용하지 않으면 임의의단어_임의의단어)
         컨테이너의 이름이 동일하면 error 발생
 * 참고 기존 이름을 변경 : docker name [기존이름] [새이름]

-v : volume (저장공간) 호스트와 컨테이너의 디렉터를 연결(마운트)
-e : 컨테이너 내에서 사용할 환경변수 설정




ARG로 container에서 실행할 명령어를 넣어줄 수 있음
ARG의 예제                            ---------
# docker -d --name shell ubuntu:20.04 /bin/bash



= 실행 중인 container 제어 (start / restart /stop / rm)
# docker start [container ID 또는 container Name]
# docker stop [container ID 또는 container Name]
# docker restart [container ID 또는 container Name]
   -t --time: default 10초 , -t 만큼 있다가 재시작, 종료, 시작
# docker rm [container ID 또는 container Name]


= 실행 중인 container 접속
# docker attach [container ID 또는 container Name]
  * container가 실행 중인 process에 접근

* 실행 중인 docker에 접속하는 이유
무엇인가 수정하기 위해서 접속 -> shell로 접속

= container 내부의 명령 실행 (start가 되어야지만 설정이 가능)
# docker exec [옵션] [container ID 또는 container Name] [실행명령어]

-shell에 접속
# docker exec -it 컨테이너이름 /bin/bash

* attach는 docker ps 시 나온 COMMAND에 접속 exec는 container 내부의 명령어를 실행
* attach의 경우 COMMAND에 나오는 명령에 접속해서 exit하고 나오면 컨테이너가 stop이 되는 경우가 많음 그래서, 현업에서는 attach 명령을 쓰지 않고 exec 명령을 사용

= host의 파일을 container로 복사 / container에 있는 파일을 host로 복사
docker cp [옵션] [~를] [~에]

(1). host의 index.html 파일을 container이름 web1 /var/www/html 폴더로 복사
docker cp ./index.html web1:/var/www/html

(2). container이름 web1 /var/www/html/index.html를 host의 현재 폴더로 복사
docker cp web1:/var/www/html/index.html .



= docker로 실행한 container(process) 확인
1. 현재 실행 중인 contianer만 출력
# docker ps
 STATUS기 UP으로 되어 있으며 up으로 되어 있는 것만 출력

2. 모든 container를 출력
# docker ps -a

3. 실행 중이지 않은 container 삭제 (실행 중인 container는 삭제 불가)
# docker rm [container ID 또는 container Name]
-f --force : 무시하고 삭제

실행 중이지 않은 모든 container 삭제 하기
# docker rm $(docker ps -qa)

4. 실행 중인 컨테이너를 실행 중지
# docker stop [container ID 또는 container Name]

5. 컨테이너를 이미지화 하기
# docker commit [이미지화시킬컨테이너ID또는이름] [생성할이미지repo]:[tag]

예제 web page 추가 시킨 web 컨테이너를 이미지화
# docker commit web skullee/testweb:v1.0

컨테이너된 이미지를 repo에 추가
docker push skullee/testweb:v1.0




vi /etc/yum.repos.d/Rocky-BaseOS.repo

baseurl=http://mirror.navercorp.com/rocky/8/BaseOS/x86_64/os


docker cp ./css web:/usr/local/apache2/htdocs/
docker cp ./html web:/usr/local/apache2/htdocs/
docker cp ./js web:/usr/local/apache2/htdocs/

echo '<a href=./html/temp.html>temp test</a>' > index.html



= 파일 찾기 명령어

1. which : 특정 명령어의 경로를 찾아주는 명령어

2. find : 파일이나 디렉터리를 찾을 때 사용하는 명령어(하위폴더까지 포함)

(1). 파일의 이름이나 디렉터리 이름 -name 정규표현식패턴
(2). 파일의 종류 -type d, f
(3). 파일의 크기(파일 용량) -size +/-숫자k/M/G
                            예제 100MB이상 -size +100M
(4). 빈파일(크기가 0byte) -empty
(5). 파일 수정 후 경과 시간 -mtime +일
(6). 상세 정보출력 -ls
(7). 지정된 권한을 가진 파일을 찾는 경우 -perm 777

예제)
- 현재 폴더에서 a로 시작하는 파일을 찾기 
 find . -name "a*" -type f

- 현재 폴더에서 a로 시작하는 디렉터리를 찾기
 find . -name "a*" -type d

- 현재 폴더에서 a가 있는 파일 또는 디렉터리를 찾기
 find . -name "*a*" 

- 현재 폴더에서 a또는b로 시작하는 이름을 가진 것 찾기
 find . -name "[ab]*"

- /var/log 폴더에서 수정한지 10일이 지난 파일만 자세히 출력
 find /var/log -mtime +10 -type f -ls

- 현재 폴더에서 액세스한지 100일이 지난 파일만을 출력
 find . -atime +100 -type f

- 최상위 폴더 (/)에서 파일의 크기가 50MB 이상인 파일을 찾아출력
 find / -size +50M -type f

- 최상위 폴더 (/)에서 빈파일을 찾아서 삭제
 find / -empty -type f -exec rm -f {} \;


- 검색할 하위 디렉터리의 최대 깊이를 지정
 1은 현재 폴더, 2는 현재 폴더와 하위 폴더, 3은 현재폴더와 하위 폴더와 하위 폴더의 하위 폴더까지

 패턴을 이름가진 파일을 현재 폴더에서만 찾아라

 find . -maxdepth 1 -name 패턴
 * maxdepth 옵션 중 가장 첫번째로 사용하는 것이 좋음

- 문제 현재 폴더의 a123, b123, c123, d123, e123파일을 찾아서 aaaa라는 폴더에 복사해보세요 (하위 폴더는 찾지 마세요)
 = 모든한글자123 이름 가진 것
find . -maxdepth 1 -name "?123" -exec cp {} ./aaaa \;

 = a부터 e까지 123이 붙은 이름을 가진 것
find . -maxdepth 1 -name "[a-e]123" -exec cp {} ./aaaa \;

- 목록 출력
find . -name "?123" -exec ls -l {} \;

- 현재 폴더에서 빈 파일을 찾아 해당 빈파일의 목록 empty-file 이름을 가진 파일에 저장 (하위 폴더는 찾지 마세요)
 
 find . -maxdepth 1 -empty > empty-file




= vi editor (VI 편집기)
1970년대 중반에 개발된 편집기

visual editor -> vi improved (vim) 
 -> 거의 모든 리눅스 기본 편집기

nano 편집기 (우분투에 기본으로 설치되는 편집기)

dnf install epel-release -y
dnf install vim -y

vim은 vi improved라는 명칭 그대로 vi의 불편한 점과 여러기능을 추가한 강력한 문서 편집기

(1). VI의 모드
명령모드 : 여러 단축명령어(단축키)를 이용해 문서 편집
           잘라내기, 복사하기, 라인삭제, 라인이동등

실행모드(ex명령모드) : 문서편집기의 메뉴와 연관이 있다고 생각
          파일저장, 파일읽기, vi 종료, 찾기, 바꾸기등
          화면 제일 하단부분에 나오게 됨
          파일관련 메뉴나 종료 명령모드에서 :
          문서 내용 찾기, 바꾸기(치환) 명령모드에서 /
        
입력모드 : 문서의 편집
          화면 제일 하단에 --INSERT--, --REPLACE--로 나옴
          명령모드에서 i (insert)
                       o

(2). VI의 모드는 항상 명령모드를 거쳐서 실행모드와 입력모드로 진입이 되어야 함


(3). 명령모드 (단축키)

- 커서이동
 hjkl <- 아래 위 -> (커서키로도 이동이 됨)
 gg 문서의 제일 첫 행
 G 문서의 제일 마지막행
 $ 해당 줄의 마지막
 ^ 해당 줄의 처음
 :라인번호 해당 라인으로 이동 (라인번호 절대값)
 숫자+엔터 커서가 위치한 라인부터 해당 숫자만큼의 라인으로 이동 (커서위치부터 라인번호 상대값)

- 텍스트/행 삭제 
 x 한글자씩 삭제 (delte와 동일) 
 숫자x 커서가 위치한 곳부터 숫자만큼의 글자를 삭제
 dw 한단어 삭제 (단어는 띄어쓰기로 구분)
 dd 커서가 위치한 행을 삭제
 숫자dd 커서가 위치한 곳부터 숫자만큼 삭제 (커서 위치 상대값)
 :5,10d 5행부터 10행까지 삭제 (라인번호 절대값)

- 복사 (yanked) 붙여넣기 (paste)
 yy 커서가 위치한 행 복사
 숫자yy 커서가 위치한 행부터 숫자만큼 복사
 p 커서가 위치한 아래 행에 복사한 행 붙여넣기
 P 커서가 위치한 윗 행에 복사한 행 붙여넣기
  
 :1,2 co 5 1행부터 2행까지 복사 후 5행 다음으로 복사
 :1,2 m 5  1행부터 2행까지 복사 후 5행 위로 이동
 
 블럭지정 v키를 누르면 화면 하단에 --VISUAL-- 블럭지정이되면서 커서가 이동이 되고 y키를 누르면 복사 되고 p를 붙여넣기가 됨

- ctrl + G 현재 파일 정보와 커서의 라인, 열 정보를 보여줌
- :set nu 라인 번호 보여주기
- :set nonu 라인 번호 감추기


- 찾기, 바꾸기 => 실행모드(ex명령모드) 즉 명령모드에서 아래 키를 누르면 바로 실행모드 진행이 됨

 찾기
  /검색할문자열패턴 커서 기준으로 오른쪽부터 아래 방향 
  ?검색할문자열패턴 커서 기준으로 왼쪽부터 윗 방향
  패턴 매치가 되면 커서가 위치하고 중단
  계속 검색 n 커서 오른쪽 아래 방향 다음 검색
  계속 검색 N 커서 왼쪽 윗 방향으로 이전 검색

 바꾸기
  :s/찾아서바꿀문자열패턴/바꿀문자열
  :s/찾아서바꿀문자열패턴/바꿀문자열/g
    g 해당 문서 전체에서 찾아서 변경
    i ignorecase 대소문자 구분안함
    
- 저장 실행모드(ex명령모드)
 :w 기존 파일 대체할 것인지 yes/no 선택
 :w! !뜻은 force로 yes/no 물어보지 않음
 :w 파일명 파일명으로 저장
 
- vi 종료
 :q
 :q!

 :wq!

- 원래의 파일을 다시 불러오기
 :e!


4. 입력모드
명령모드 -> 입력모드의 전환
i 현재 커서 위치부터 입력모드 시작
I 현재 커서가 위치한 행의 처음부터 입력 시작
a 현재 커서가 위치한 다음 칸(오른쪽부터) 입력 시작
A 현재 커서가 위치한 행의 마지막부터 입력 시작
o 현재 커서가 위치한 다음 행에 빈줄을 생성 후 입력 시작
O 현재 커서가 위치한 이전 행에 빈줄을 생성 후 입력 시작
s 현재 커서가 위치한 한 문자를 삭제한 후 입력 시작
S 현재 커서가 위치한 한 행을 삭제한 후 입력 시작

r --REPLACE--


